import 'package:calculator/features/calculator/domain/entities/calculation.dart';
import 'package:calculator/features/calculator/domain/usecases/calculate_expression.dart';
import 'package:calculator/features/calculator/domain/usecases/get_history.dart';
import 'package:flutter/material.dart';
import 'dart:convert';

class CalculatorController extends ChangeNotifier {
  final CalculateExpression calculateExpression;
  final GetHistory getHistory;

  CalculatorController({
    required this.calculateExpression,
    required this.getHistory,
  });

  String _expression = '';
  String _result = '';
  List<Calculation> _history = [];
  bool _loading = false;

  String get expression => _expression;

  String get result => _result;

  List<Calculation> get history => _history;

  bool get loading => _loading;

  void setExpression(String value) {
    print('üîÑ CalculatorController.setExpression: "$value"');
    _expression = value;
    print('üì¢ notifyListeners() –≤—ã–∑–≤–∞–Ω –∏–∑ setExpression');
    notifyListeners();
  }

  Map<String, dynamic>? _parseResponse(String raw) {
    try {
      final fixed = raw
          .replaceAll(
              RegExp(r'(CalculationSuccess|CalculationError)\s*\{'), '{')
          .replaceAllMapped(
            RegExp(r'(\w+)\s*[=:]\s*([^,}]+)'),
            (match) {
              final key = match[1];
              var value = match[2]?.trim();

              if (value != null && !value.startsWith('"')) {
                if (double.tryParse(value) == null && value != 'null') {
                  value = '"$value"';
                }
              }
              return '"$key":$value';
            },
          )
          .replaceAll(RegExp(r',\s*}'), '}')
          .replaceAll(RegExp(r'}\s*$'), '}')
          .replaceAll(RegExp(r'\s+'), ' ');

      print('üõ† –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è JSON-–¥–µ–∫–æ–¥–∏–Ω–≥–∞: $fixed');
      return jsonDecode(fixed) as Map<String, dynamic>;
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: $e');
      return null;
    }
  }

  Future<void> calculate() async {
    print('üßÆ CalculatorController.calculate() –Ω–∞—á–∞—Ç–æ');
    _loading = true;
    notifyListeners();

    try {
      final response = await calculateExpression(_expression);
      print('üì• Raw response data:\n$response');

      final parsed = _parseResponse(response);
      if (parsed == null) {
        _result = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞';
        return;
      }

      final result = parsed['result'] as String?;
      if (result == 'success') {
        final value = parsed['value'];
        if (value != null) {
          if (value is num) {
            _result = value.toString();
          } else {
            _result = double.tryParse(value.toString())?.toString() ??
                '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∏—Å–ª–∞';
          }
        } else {
          _result = '–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ';
        }
      } else if (result == 'error') {
        final message = parsed['message'] as String?;
        final kind = parsed['kind'] as String?;
        _result = '–û—à–∏–±–∫–∞: ${message ?? kind ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}';
      } else {
        _result = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞';
      }

      print('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: $_result');
      await fetchHistory();
    } catch (e, st) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $e\n$st');
      if (e.toString().contains('CalculationError')) {
        _result = e.toString().replaceFirst('Exception: ', '');
      } else {
        _result = '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${e.toString()}';
      }
    } finally {
      _loading = false;
      notifyListeners();
      print('üßÆ CalculatorController.calculate() –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
  }

  Future<void> fetchHistory() async {
    print('üìú CalculatorController.fetchHistory() –Ω–∞—á–∞—Ç–æ');
    _history = await getHistory();
    print('üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: ${_history.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    print('üì¢ notifyListeners() –≤—ã–∑–≤–∞–Ω –∏–∑ fetchHistory');
    notifyListeners();
    print('üìú CalculatorController.fetchHistory() –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}
